@page "/"

@inherits LayoutComponentBase

@using NPokerEngine.Players;
@using NPokerEngine.Types;

@inject JsonSerializerOptions JsonSerializerOptions;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<EditForm Model="@_model" OnSubmit="GenerateInitialState">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="inputPlayersCount">Players Count:</label>
        <InputNumber @bind-Value="@_model.PlayersCount" class="form-control" id="inputPlayersCount" />
    </div>
    <br />
    <div class="form-group">
        <label for="inputSmallBlindAmount">Small Blind Amount:</label>
        <InputNumber @bind-Value="@_model.SmallBlindAmount" class="form-control" id="inputSmallBlindAmount" />
    </div>
    <br />
    <button class="btn btn-primary" type="submit">Generate</button>
</EditForm>

<button class="btn btn-success" @onclick="GeneratePossibleActions">Generate Actions</button>

<JsonEditor @bind-JsonValue="@_initialStateJson" @bind-JsonDiffValue="@_modifiedStateJson" />

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />


@code {
    [CascadingParameter] public NavMenu NavMenu { get; set; }

    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    SetupModel _model = new();
    string _initialStateJson, _modifiedStateJson;

    protected override void OnInitialized() => GenerateInitialState();

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    private void GenerateInitialState()
    {
        var emulator = new Emulator();
        emulator.SetupConfig(max_round: int.MaxValue, initial_stack: 100, small_blind_amount: _model.SmallBlindAmount);
        for (int ix = 1; ix <= _model.PlayersCount; ix++)
        {
            emulator.RegisterPlayer(new FoldPlayer(name: $"p{ix}", uuid: Guid.Parse(Guid.Empty.ToString().Replace("0", ix.ToString()))));
        }

        var gameState = emulator.GenerateInitialState();

        _initialStateJson = JsonSerializer.Serialize(gameState, JsonSerializerOptions);
    }

    private void GeneratePossibleActions()
    {
        var emulator = new Emulator();
        emulator.SetupConfig(max_round: int.MaxValue, initial_stack: 100, small_blind_amount: _model.SmallBlindAmount);

        var gameState = JsonSerializer.Deserialize<GameState>(_initialStateJson, JsonSerializerOptions);
        if (emulator.NeedStartRound(gameState))
        {
            (gameState, _) = emulator.StartNewRound(gameState);
            _modifiedStateJson = JsonSerializer.Serialize(gameState, JsonSerializerOptions);
            StateHasChanged();
        }

        var possibleActions = emulator.GeneratePossibleActions(gameState);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    class SetupModel
    {
        [Range(2, 6)] public int PlayersCount { get; set; } = 6;
        [Range(1, 50)] public int SmallBlindAmount { get; set; } = 1;
    }
}